# ============================================================================
# MICROSOFT SQL SERVER DATABASE - PREDEFINED QUERIES CONFIGURATION
# ============================================================================
# Database: Corporate

DB
# These queries are loaded by the framework and can be executed using:
# When user executes predefined query "QUERY_NAME"
#
# The framework reads these as: DB_QUERY_{QUERY_NAME}
# ============================================================================

# ====================================================================================
# BASIC EMPLOYEE QUERIES
# ====================================================================================

# Get all employees
DB_QUERY_SQLSERVER_GET_ALL_EMPLOYEES=SELECT * FROM Employees ORDER BY EmployeeID

# Get employee count
DB_QUERY_SQLSERVER_GET_EMPLOYEE_COUNT=SELECT COUNT(*) AS TotalEmployees FROM Employees

# Get employee by ID
DB_QUERY_SQLSERVER_GET_EMPLOYEE_BY_ID=SELECT * FROM Employees WHERE EmployeeID = 1

# Get top 10 highest paid employees
DB_QUERY_SQLSERVER_GET_TOP_EARNERS=SELECT TOP 10 EmployeeID, FirstName, LastName, JobTitle, Salary FROM Employees ORDER BY Salary DESC

# Get recently hired employees (hired in last 365 days)
DB_QUERY_SQLSERVER_GET_RECENT_HIRES=SELECT * FROM Employees WHERE HireDate >= DATEADD(DAY, -365, GETDATE()) ORDER BY HireDate DESC

# Get employees by department name
DB_QUERY_SQLSERVER_GET_ENGINEERING_EMPLOYEES=SELECT e.* FROM Employees e INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID WHERE d.DepartmentName = 'Engineering' ORDER BY e.Salary DESC

# Get employee full details with department and manager
DB_QUERY_SQLSERVER_GET_EMPLOYEE_FULL_DETAILS=SELECT e.EmployeeID, e.FirstName + ' ' + e.LastName AS FullName, e.Email, e.JobTitle, e.Salary, d.DepartmentName, d.Location, m.FirstName + ' ' + m.LastName AS ManagerName FROM Employees e LEFT JOIN Departments d ON e.DepartmentID = d.DepartmentID LEFT JOIN Employees m ON e.ManagerID = m.EmployeeID WHERE e.EmployeeID = 1

# ====================================================================================
# DEPARTMENT QUERIES
# ====================================================================================

# Get all departments
DB_QUERY_SQLSERVER_GET_ALL_DEPARTMENTS=SELECT * FROM Departments ORDER BY DepartmentID

# Get department count
DB_QUERY_SQLSERVER_GET_DEPARTMENT_COUNT=SELECT COUNT(*) AS TotalDepartments FROM Departments

# Get department with employee count and statistics
DB_QUERY_SQLSERVER_GET_DEPT_EMPLOYEE_STATS=SELECT d.DepartmentID, d.DepartmentName, d.Location, d.Budget, COUNT(e.EmployeeID) AS EmployeeCount, ISNULL(AVG(e.Salary), 0) AS AvgSalary, ISNULL(MIN(e.Salary), 0) AS MinSalary, ISNULL(MAX(e.Salary), 0) AS MaxSalary FROM Departments d LEFT JOIN Employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentID, d.DepartmentName, d.Location, d.Budget ORDER BY EmployeeCount DESC

# Get high budget departments (>= 3 million)
DB_QUERY_SQLSERVER_GET_HIGH_BUDGET_DEPTS=SELECT * FROM Departments WHERE Budget >= 3000000 ORDER BY Budget DESC

# ====================================================================================
# PROJECT QUERIES
# ====================================================================================

# Get all projects
DB_QUERY_SQLSERVER_GET_ALL_PROJECTS=SELECT * FROM Projects ORDER BY ProjectID

# Get active projects
DB_QUERY_SQLSERVER_GET_ACTIVE_PROJECTS=SELECT * FROM Projects WHERE Status = 'Active' ORDER BY Budget DESC

# Get projects with department info
DB_QUERY_SQLSERVER_GET_PROJECTS_WITH_DEPT=SELECT p.ProjectID, p.ProjectName, p.Status, p.StartDate, p.EndDate, p.Budget, d.DepartmentName, d.Location FROM Projects p INNER JOIN Departments d ON p.DepartmentID = d.DepartmentID ORDER BY p.Budget DESC

# Get project count by status
DB_QUERY_SQLSERVER_GET_PROJECT_COUNT_BY_STATUS=SELECT Status, COUNT(*) AS ProjectCount FROM Projects GROUP BY Status ORDER BY ProjectCount DESC

# Get high budget projects (>= 5 million)
DB_QUERY_SQLSERVER_GET_HIGH_BUDGET_PROJECTS=SELECT * FROM Projects WHERE Budget >= 5000000 ORDER BY Budget DESC

# ====================================================================================
# CUSTOMER & ORDER QUERIES
# ====================================================================================

# Get all customers
DB_QUERY_SQLSERVER_GET_ALL_CUSTOMERS=SELECT * FROM Customers ORDER BY CustomerID

# Get customer count
DB_QUERY_SQLSERVER_GET_CUSTOMER_COUNT=SELECT COUNT(*) AS TotalCustomers FROM Customers

# Get customers by city
DB_QUERY_SQLSERVER_GET_BANGALORE_CUSTOMERS=SELECT * FROM Customers WHERE City = 'Bangalore' ORDER BY CompanyName

# Get all orders
DB_QUERY_SQLSERVER_GET_ALL_ORDERS=SELECT * FROM Orders ORDER BY OrderDate DESC

# Get delivered orders
DB_QUERY_SQLSERVER_GET_DELIVERED_ORDERS=SELECT * FROM Orders WHERE Status = 'Delivered' ORDER BY ShippedDate DESC

# Get pending orders
DB_QUERY_SQLSERVER_GET_PENDING_ORDERS=SELECT * FROM Orders WHERE Status = 'Pending' ORDER BY OrderDate

# Get order count by status
DB_QUERY_SQLSERVER_GET_ORDER_COUNT_BY_STATUS=SELECT Status, COUNT(*) AS OrderCount FROM Orders GROUP BY Status ORDER BY OrderCount DESC

# Get high value orders (>= 500,000)
DB_QUERY_SQLSERVER_GET_HIGH_VALUE_ORDERS=SELECT * FROM Orders WHERE TotalAmount >= 500000 ORDER BY TotalAmount DESC

# ====================================================================================
# COMPLEX ANALYTICAL QUERIES
# ====================================================================================

# Get sales performance by employee
DB_QUERY_SQLSERVER_GET_SALES_PERFORMANCE=SELECT e.EmployeeID, e.FirstName + ' ' + e.LastName AS FullName, e.JobTitle, d.DepartmentName, COUNT(o.OrderID) AS TotalOrders, ISNULL(SUM(o.TotalAmount), 0) AS TotalRevenue, ISNULL(AVG(o.TotalAmount), 0) AS AvgOrderValue FROM Employees e INNER JOIN Departments d ON e.DepartmentID = d.DepartmentID LEFT JOIN Orders o ON e.EmployeeID = o.EmployeeID AND o.Status = 'Delivered' GROUP BY e.EmployeeID, e.FirstName, e.LastName, e.JobTitle, d.DepartmentName HAVING COUNT(o.OrderID) > 0 ORDER BY TotalRevenue DESC

# Get employee project allocation
DB_QUERY_SQLSERVER_GET_EMPLOYEE_PROJECT_ALLOCATION=SELECT e.EmployeeID, e.FirstName + ' ' + e.LastName AS FullName, COUNT(ep.ProjectID) AS TotalProjects, SUM(ep.HoursAllocated) AS TotalHours FROM Employees e LEFT JOIN EmployeeProjects ep ON e.EmployeeID = ep.EmployeeID GROUP BY e.EmployeeID, e.FirstName, e.LastName HAVING COUNT(ep.ProjectID) > 0 ORDER BY TotalHours DESC

# Get project budget utilization
DB_QUERY_SQLSERVER_GET_PROJECT_BUDGET_UTILIZATION=SELECT p.ProjectID, p.ProjectName, p.Status, p.Budget AS AllocatedBudget, COUNT(ep.EmployeeID) AS TeamSize, ISNULL(SUM(ep.HoursAllocated), 0) AS TotalHoursAllocated, ISNULL(SUM(ep.HoursAllocated * (e.Salary / 160)), 0) AS EstimatedLaborCost, (p.Budget - ISNULL(SUM(ep.HoursAllocated * (e.Salary / 160)), 0)) AS RemainingBudget FROM Projects p LEFT JOIN EmployeeProjects ep ON p.ProjectID = ep.ProjectID LEFT JOIN Employees e ON ep.EmployeeID = e.EmployeeID GROUP BY p.ProjectID, p.ProjectName, p.Status, p.Budget ORDER BY EstimatedLaborCost DESC

# Get monthly sales summary (for 2024)
DB_QUERY_SQLSERVER_GET_MONTHLY_SALES_2024=SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, DATENAME(MONTH, OrderDate) AS MonthName, COUNT(OrderID) AS TotalOrders, SUM(TotalAmount) AS TotalRevenue, AVG(TotalAmount) AS AvgOrderValue FROM Orders WHERE YEAR(OrderDate) = 2024 GROUP BY YEAR(OrderDate), MONTH(OrderDate), DATENAME(MONTH, OrderDate) ORDER BY Year, Month

# Get customer order summary
DB_QUERY_SQLSERVER_GET_CUSTOMER_ORDER_SUMMARY=SELECT c.CustomerID, c.CompanyName, c.City, c.Country, COUNT(o.OrderID) AS TotalOrders, ISNULL(SUM(CASE WHEN o.Status = 'Delivered' THEN o.TotalAmount ELSE 0 END), 0) AS TotalRevenue, ISNULL(AVG(CASE WHEN o.Status = 'Delivered' THEN o.TotalAmount ELSE NULL END), 0) AS AvgOrderValue, MAX(o.OrderDate) AS LastOrderDate FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerID, c.CompanyName, c.City, c.Country HAVING COUNT(o.OrderID) > 0 ORDER BY TotalRevenue DESC

# Get salary distribution by department
DB_QUERY_SQLSERVER_GET_SALARY_DISTRIBUTION=SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount, MIN(e.Salary) AS MinSalary, MAX(e.Salary) AS MaxSalary, AVG(e.Salary) AS AvgSalary, SUM(e.Salary) AS TotalSalaryExpense FROM Departments d LEFT JOIN Employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName ORDER BY TotalSalaryExpense DESC

# ====================================================================================
# VIEWS QUERIES
# ====================================================================================

# Query employee full details view
DB_QUERY_SQLSERVER_VIEW_EMPLOYEE_DETAILS=SELECT * FROM vw_EmployeeFullDetails ORDER BY EmployeeID

# Query project summary view
DB_QUERY_SQLSERVER_VIEW_PROJECT_SUMMARY=SELECT * FROM vw_ProjectSummary ORDER BY Budget DESC

# Query customer order summary view
DB_QUERY_SQLSERVER_VIEW_CUSTOMER_SUMMARY=SELECT * FROM vw_CustomerOrderSummary ORDER BY TotalRevenue DESC

# ====================================================================================
# DATE & TIME QUERIES
# ====================================================================================

# Get current database date time
DB_QUERY_SQLSERVER_GET_CURRENT_DATETIME=SELECT GETDATE() AS CurrentDateTime, GETUTCDATE() AS CurrentUTCDateTime

# Get database version and details
DB_QUERY_SQLSERVER_GET_DB_INFO=SELECT @@VERSION AS Version, DB_NAME() AS DatabaseName, SERVERPROPERTY('ProductVersion') AS ProductVersion, SERVERPROPERTY('Edition') AS Edition

# Get employees hired in specific month
DB_QUERY_SQLSERVER_GET_EMPLOYEES_HIRED_IN_JANUARY=SELECT * FROM Employees WHERE MONTH(HireDate) = 1 ORDER BY HireDate

# ====================================================================================
# AGGREGATE QUERIES
# ====================================================================================

# Get total salary expense
DB_QUERY_SQLSERVER_GET_TOTAL_SALARY_EXPENSE=SELECT SUM(Salary) AS TotalSalaryExpense FROM Employees

# Get average salary by job title
DB_QUERY_SQLSERVER_GET_AVG_SALARY_BY_JOB=SELECT JobTitle, COUNT(*) AS EmployeeCount, AVG(Salary) AS AvgSalary, MIN(Salary) AS MinSalary, MAX(Salary) AS MaxSalary FROM Employees GROUP BY JobTitle ORDER BY AvgSalary DESC

# Get order statistics
DB_QUERY_SQLSERVER_GET_ORDER_STATISTICS=SELECT COUNT(*) AS TotalOrders, SUM(TotalAmount) AS TotalRevenue, AVG(TotalAmount) AS AvgOrderValue, MIN(TotalAmount) AS MinOrderValue, MAX(TotalAmount) AS MaxOrderValue FROM Orders WHERE Status = 'Delivered'

# ====================================================================================
# STORED PROCEDURE NAMES (For reference in tests)
# ====================================================================================

DB_SPROC_GET_EMPLOYEE_BY_ID=sp_GetEmployeeByID
DB_SPROC_GET_EMPLOYEES_BY_DEPT=sp_GetEmployeesByDepartment
DB_SPROC_GET_DEPT_SUMMARY=sp_GetDepartmentSummary
DB_SPROC_GET_EMPLOYEE_PROJECTS=sp_GetEmployeeProjects
DB_SPROC_GET_PROJECT_TEAM=sp_GetProjectTeam
DB_SPROC_GET_CUSTOMER_ORDERS=sp_GetCustomerOrders
DB_SPROC_GET_TOP_PERFORMERS=sp_GetTopPerformingEmployees
DB_SPROC_GET_MONTHLY_SALES=sp_GetMonthlySalesReport
DB_SPROC_UPDATE_EMPLOYEE_SALARY=sp_UpdateEmployeeSalary
DB_SPROC_GET_PROJECT_BUDGET_STATUS=sp_GetProjectBudgetStatus
DB_SPROC_GET_EMPLOYEE_HIERARCHY=sp_GetEmployeeHierarchy
DB_SPROC_SEARCH_EMPLOYEES=sp_SearchEmployees

# ====================================================================================
# TABLE NAMES (For reference in tests)
# ====================================================================================

DB_TABLE_DEPARTMENTS=Departments
DB_TABLE_EMPLOYEES=Employees
DB_TABLE_PROJECTS=Projects
DB_TABLE_EMPLOYEE_PROJECTS=EmployeeProjects
DB_TABLE_CUSTOMERS=Customers
DB_TABLE_ORDERS=Orders

# ============================================================================
# ORACLE DATABASE - PREDEFINED QUERIES CONFIGURATION
# ============================================================================
# These queries are loaded by the framework and can be executed using:
# When user executes predefined query "QUERY_NAME"
#
# The framework reads these as: DB_QUERY_{QUERY_NAME}
# ============================================================================

# ====================================================================================
# BASIC QUERIES
# ====================================================================================

# Get all employees
DB_QUERY_GET_ALL_EMPLOYEES=SELECT * FROM employees ORDER BY employee_id

# Get employee count
DB_QUERY_GET_EMPLOYEE_COUNT=SELECT COUNT(*) AS total_count FROM employees

# Get all departments
DB_QUERY_GET_ALL_DEPARTMENTS=SELECT * FROM departments ORDER BY department_id

# Get department count
DB_QUERY_GET_DEPARTMENT_COUNT=SELECT COUNT(*) AS dept_count FROM departments

# ====================================================================================
# DEPARTMENT-SPECIFIC QUERIES
# ====================================================================================

# Get IT Department employees
DB_QUERY_GET_IT_EMPLOYEES=SELECT * FROM employees WHERE department_id = 10 ORDER BY salary DESC

# Get Sales Department employees
DB_QUERY_GET_SALES_EMPLOYEES=SELECT * FROM employees WHERE department_id = 20 ORDER BY hire_date

# Get HR Department employees
DB_QUERY_GET_HR_EMPLOYEES=SELECT * FROM employees WHERE department_id = 30 ORDER BY last_name

# Get Finance Department employees
DB_QUERY_GET_FINANCE_EMPLOYEES=SELECT * FROM employees WHERE department_id = 40 ORDER BY salary DESC

# ====================================================================================
# SALARY ANALYSIS QUERIES
# ====================================================================================

# Get high earners (salary > 80000)
DB_QUERY_GET_HIGH_EARNERS=SELECT employee_id, first_name, last_name, salary FROM employees WHERE salary > 80000 ORDER BY salary DESC

# Get average salary
DB_QUERY_GET_AVERAGE_SALARY=SELECT AVG(salary) AS avg_salary FROM employees

# Get salary statistics
DB_QUERY_GET_SALARY_STATS=SELECT MIN(salary) AS min_salary, MAX(salary) AS max_salary, AVG(salary) AS avg_salary, COUNT(*) AS emp_count FROM employees

# Get salary range analysis
DB_QUERY_GET_SALARY_RANGES=SELECT CASE WHEN salary < 60000 THEN 'Low' WHEN salary BETWEEN 60000 AND 80000 THEN 'Medium' ELSE 'High' END AS salary_range, COUNT(*) AS emp_count FROM employees GROUP BY CASE WHEN salary < 60000 THEN 'Low' WHEN salary BETWEEN 60000 AND 80000 THEN 'Medium' ELSE 'High' END ORDER BY salary_range

# ====================================================================================
# DEPARTMENT ANALYSIS QUERIES
# ====================================================================================

# Get department employee counts
DB_QUERY_GET_DEPT_EMPLOYEE_COUNTS=SELECT d.department_name, COUNT(e.employee_id) AS emp_count FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name ORDER BY emp_count DESC

# Get department with highest average salary
DB_QUERY_GET_TOP_PAYING_DEPT=SELECT d.department_name, AVG(e.salary) AS avg_salary FROM departments d JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name ORDER BY avg_salary DESC FETCH FIRST 1 ROWS ONLY

# Get department headcount by location
DB_QUERY_GET_DEPT_BY_LOCATION=SELECT location, COUNT(DISTINCT department_id) AS dept_count FROM departments GROUP BY location ORDER BY dept_count DESC

# ====================================================================================
# EMPLOYEE SEARCH QUERIES
# ====================================================================================

# Search employee by email domain
DB_QUERY_SEARCH_BY_EMAIL_DOMAIN=SELECT * FROM employees WHERE email LIKE '%@company.com' ORDER BY last_name

# Get recently hired employees (last 2 years)
DB_QUERY_GET_RECENT_HIRES=SELECT * FROM employees WHERE hire_date >= ADD_MONTHS(SYSDATE, -24) ORDER BY hire_date DESC

# Get employees by name pattern
DB_QUERY_SEARCH_BY_NAME_PATTERN=SELECT * FROM employees WHERE UPPER(first_name) LIKE 'J%' OR UPPER(last_name) LIKE 'J%' ORDER BY last_name

# ====================================================================================
# PRODUCT QUERIES
# ====================================================================================

# Get all products
DB_QUERY_GET_ALL_PRODUCTS=SELECT * FROM products ORDER BY product_id

# Get products by category
DB_QUERY_GET_ELECTRONICS=SELECT * FROM products WHERE category = 'Electronics' ORDER BY price DESC

DB_QUERY_GET_FURNITURE=SELECT * FROM products WHERE category = 'Furniture' ORDER BY price

DB_QUERY_GET_ACCESSORIES=SELECT * FROM products WHERE category = 'Accessories' ORDER BY product_name

# Get high-value products
DB_QUERY_GET_HIGH_VALUE_PRODUCTS=SELECT * FROM products WHERE price > 300 ORDER BY price DESC

# Get low stock products
DB_QUERY_GET_LOW_STOCK_PRODUCTS=SELECT * FROM products WHERE stock_quantity < 50 ORDER BY stock_quantity

# Product inventory value
DB_QUERY_GET_INVENTORY_VALUE=SELECT category, SUM(price * stock_quantity) AS total_value, COUNT(*) AS product_count FROM products GROUP BY category ORDER BY total_value DESC

# ====================================================================================
# JOIN QUERIES (COMPLEX)
# ====================================================================================

# Employee details with department info
DB_QUERY_GET_EMPLOYEE_DEPT_DETAILS=SELECT e.employee_id, e.first_name, e.last_name, e.email, e.salary, d.department_name, d.location FROM employees e JOIN departments d ON e.department_id = d.department_id ORDER BY e.employee_id

# Department summary with employee details
DB_QUERY_GET_DEPT_SUMMARY=SELECT d.department_name, d.location, COUNT(e.employee_id) AS emp_count, AVG(e.salary) AS avg_salary, MIN(e.salary) AS min_salary, MAX(e.salary) AS max_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name, d.location ORDER BY emp_count DESC

# ====================================================================================
# AGGREGATE & STATISTICAL QUERIES
# ====================================================================================

# Get hire date distribution by year
DB_QUERY_GET_HIRE_DISTRIBUTION=SELECT TO_CHAR(hire_date, 'YYYY') AS hire_year, COUNT(*) AS hired_count FROM employees GROUP BY TO_CHAR(hire_date, 'YYYY') ORDER BY hire_year DESC

# Get email domain distribution
DB_QUERY_GET_EMAIL_DISTRIBUTION=SELECT SUBSTR(email, INSTR(email, '@') + 1) AS domain, COUNT(*) AS email_count FROM employees GROUP BY SUBSTR(email, INSTR(email, '@') + 1) ORDER BY email_count DESC

# Get phone prefix distribution
DB_QUERY_GET_PHONE_DISTRIBUTION=SELECT SUBSTR(phone, 1, 3) AS phone_prefix, COUNT(*) AS count FROM employees GROUP BY SUBSTR(phone, 1, 3) ORDER BY count DESC

# ====================================================================================
# DATA VALIDATION QUERIES
# ====================================================================================

# Check for duplicate emails
DB_QUERY_CHECK_DUPLICATE_EMAILS=SELECT email, COUNT(*) AS count FROM employees GROUP BY email HAVING COUNT(*) > 1

# Check for null values in critical fields
DB_QUERY_CHECK_NULL_CRITICAL_FIELDS=SELECT COUNT(*) AS null_count FROM employees WHERE email IS NULL OR salary IS NULL OR department_id IS NULL

# Validate salary ranges
DB_QUERY_VALIDATE_SALARY_RANGE=SELECT COUNT(*) AS invalid_salary_count FROM employees WHERE salary < 0 OR salary > 10000000

# Validate department references
DB_QUERY_VALIDATE_DEPT_REFERENCES=SELECT COUNT(*) AS orphan_employees FROM employees e WHERE NOT EXISTS (SELECT 1 FROM departments d WHERE d.department_id = e.department_id)

# ====================================================================================
# QUERIES WITH VARIABLE INTERPOLATION SUPPORT
# ====================================================================================
# These queries support runtime variable replacement:
# ${ENV_VAR} - Environment variable
# %CONFIG_VAR% - Configuration variable
# {{context_var}} - Context variable from previous steps
# ====================================================================================

# Get employees by department (supports variable interpolation)
DB_QUERY_GET_EMPLOYEES_BY_DEPT=SELECT * FROM employees WHERE department_id = {{dept_id}} ORDER BY employee_id

# Get employees with salary above threshold (supports variable interpolation)
DB_QUERY_GET_HIGH_SALARY_EMPLOYEES=SELECT * FROM employees WHERE salary > {{salary_threshold}} ORDER BY salary DESC

# Get employees hired after date (supports variable interpolation)
DB_QUERY_GET_EMPLOYEES_AFTER_DATE=SELECT * FROM employees WHERE hire_date > TO_DATE('{{hire_date}}', 'YYYY-MM-DD') ORDER BY hire_date

# Search employees by name (supports variable interpolation)
DB_QUERY_SEARCH_EMPLOYEES_BY_NAME=SELECT * FROM employees WHERE UPPER(first_name) LIKE UPPER('%{{search_name}}%') OR UPPER(last_name) LIKE UPPER('%{{search_name}}%')

# Get products by category (supports variable interpolation)
DB_QUERY_GET_PRODUCTS_BY_CATEGORY=SELECT * FROM products WHERE category = '{{product_category}}' ORDER BY price DESC

# ====================================================================================
# PERFORMANCE & MONITORING QUERIES
# ====================================================================================

# Current database date/time
DB_QUERY_GET_CURRENT_DATE=SELECT SYSDATE AS current_date, SYSTIMESTAMP AS current_timestamp FROM DUAL

# Database version info
DB_QUERY_GET_DB_VERSION=SELECT * FROM v$version WHERE banner LIKE 'Oracle%'

# Check table counts (all tables)
DB_QUERY_GET_TABLE_COUNTS=SELECT 'employees' AS table_name, COUNT(*) AS row_count FROM employees UNION ALL SELECT 'departments', COUNT(*) FROM departments UNION ALL SELECT 'products', COUNT(*) FROM products

# ====================================================================================
# TEST DATA CLEANUP QUERIES
# ====================================================================================

# Find test data records (for cleanup)
DB_QUERY_FIND_TEST_DATA=SELECT * FROM employees WHERE email LIKE '%test%' OR first_name LIKE '%Test%' OR last_name LIKE '%Test%'

# Count test records
DB_QUERY_COUNT_TEST_RECORDS=SELECT COUNT(*) AS test_record_count FROM employees WHERE email LIKE '%test%' OR first_name LIKE '%Test%' OR last_name LIKE '%Test%'

# ====================================================================================
# REPORTING QUERIES
# ====================================================================================

# Employee roster report
DB_QUERY_EMPLOYEE_ROSTER=SELECT e.employee_id, e.first_name || ' ' || e.last_name AS full_name, e.email, e.phone, d.department_name, e.salary, TO_CHAR(e.hire_date, 'YYYY-MM-DD') AS hire_date FROM employees e JOIN departments d ON e.department_id = d.department_id ORDER BY d.department_name, e.last_name

# Department budget summary (simulated)
DB_QUERY_DEPT_BUDGET_SUMMARY=SELECT d.department_name, COUNT(e.employee_id) AS emp_count, SUM(e.salary) AS total_salary, AVG(e.salary) AS avg_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name ORDER BY total_salary DESC

# Inventory valuation report
DB_QUERY_INVENTORY_REPORT=SELECT product_name, category, price, stock_quantity, (price * stock_quantity) AS inventory_value FROM products ORDER BY inventory_value DESC

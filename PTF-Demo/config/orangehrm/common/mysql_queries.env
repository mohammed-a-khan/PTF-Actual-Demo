# ============================================================================
# MYSQL DATABASE - PREDEFINED QUERIES CONFIGURATION
# ============================================================================
# These queries are loaded by the framework and can be executed using:
# When user executes predefined query "QUERY_NAME"
#
# The framework reads these as: DB_QUERY_{QUERY_NAME}
# ============================================================================

# ====================================================================================
# BASIC EMPLOYEE QUERIES
# ====================================================================================

# Get all employees
DB_QUERY_MYSQL_GET_ALL_EMPLOYEES=SELECT * FROM employees ORDER BY employee_id

# Get employee count
DB_QUERY_MYSQL_GET_EMPLOYEE_COUNT=SELECT COUNT(*) AS total_employees FROM employees

# Get active employees
DB_QUERY_MYSQL_GET_ACTIVE_EMPLOYEES=SELECT * FROM employees ORDER BY hire_date DESC

# Get top earners (top 10)
DB_QUERY_MYSQL_GET_TOP_EARNERS=SELECT employee_id, first_name, last_name, job_title, salary FROM employees ORDER BY salary DESC LIMIT 10

# ====================================================================================
# DEPARTMENT QUERIES
# ====================================================================================

# Get all departments
DB_QUERY_MYSQL_GET_ALL_DEPARTMENTS=SELECT * FROM departments ORDER BY department_id

# Get department count
DB_QUERY_MYSQL_GET_DEPARTMENT_COUNT=SELECT COUNT(*) AS total_departments FROM departments

# Get Engineering department employees
DB_QUERY_MYSQL_GET_ENGINEERING_EMPLOYEES=SELECT e.* FROM employees e JOIN departments d ON e.department_id = d.department_id WHERE d.department_name = 'Engineering' ORDER BY e.salary DESC

# Get department with budget
DB_QUERY_MYSQL_GET_DEPT_WITH_BUDGET=SELECT department_id, department_name, location, budget FROM departments WHERE budget IS NOT NULL ORDER BY budget DESC

# ====================================================================================
# PROJECT QUERIES
# ====================================================================================

# Get all projects
DB_QUERY_MYSQL_GET_ALL_PROJECTS=SELECT * FROM projects ORDER BY project_id

# Get active projects
DB_QUERY_MYSQL_GET_ACTIVE_PROJECTS=SELECT * FROM projects WHERE status = 'Active' ORDER BY budget DESC

# Get completed projects
DB_QUERY_MYSQL_GET_COMPLETED_PROJECTS=SELECT * FROM projects WHERE status = 'Completed' ORDER BY end_date DESC

# Get projects by status
DB_QUERY_MYSQL_GET_PLANNING_PROJECTS=SELECT * FROM projects WHERE status = 'Planning' ORDER BY start_date

# Get high-budget projects (> 5 million)
DB_QUERY_MYSQL_GET_HIGH_BUDGET_PROJECTS=SELECT * FROM projects WHERE budget > 5000000 ORDER BY budget DESC

# ====================================================================================
# CUSTOMER & ORDER QUERIES
# ====================================================================================

# Get all customers
DB_QUERY_MYSQL_GET_ALL_CUSTOMERS=SELECT * FROM customers ORDER BY customer_id

# Get customer count
DB_QUERY_MYSQL_GET_CUSTOMER_COUNT=SELECT COUNT(*) AS total_customers FROM customers

# Get all orders
DB_QUERY_MYSQL_GET_ALL_ORDERS=SELECT * FROM orders ORDER BY order_date DESC

# Get delivered orders
DB_QUERY_MYSQL_GET_DELIVERED_ORDERS=SELECT * FROM orders WHERE status = 'Delivered' ORDER BY shipped_date DESC

# Get pending orders
DB_QUERY_MYSQL_GET_PENDING_ORDERS=SELECT * FROM orders WHERE status = 'Pending' ORDER BY order_date

# Get cancelled orders
DB_QUERY_MYSQL_GET_CANCELLED_ORDERS=SELECT * FROM orders WHERE status = 'Cancelled' ORDER BY order_date DESC

# ====================================================================================
# EMPLOYEE ANALYSIS QUERIES
# ====================================================================================

# Get employees by department with stats
DB_QUERY_MYSQL_EMPLOYEE_DEPT_STATS=SELECT d.department_name, COUNT(e.employee_id) AS emp_count, AVG(e.salary) AS avg_salary, MIN(e.salary) AS min_salary, MAX(e.salary) AS max_salary FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name ORDER BY emp_count DESC

# Get manager hierarchy
DB_QUERY_MYSQL_GET_MANAGERS=SELECT e.employee_id, e.first_name, e.last_name, e.job_title, COUNT(sub.employee_id) AS direct_reports FROM employees e LEFT JOIN employees sub ON e.employee_id = sub.manager_id WHERE e.manager_id IS NULL GROUP BY e.employee_id, e.first_name, e.last_name, e.job_title ORDER BY direct_reports DESC

# Get employees hired in current year
DB_QUERY_MYSQL_GET_RECENT_HIRES=SELECT * FROM employees WHERE YEAR(hire_date) = YEAR(CURDATE()) ORDER BY hire_date DESC

# Get salary distribution by range
DB_QUERY_MYSQL_SALARY_DISTRIBUTION=SELECT CASE WHEN salary < 500000 THEN 'Below 5L' WHEN salary BETWEEN 500000 AND 1000000 THEN '5L-10L' WHEN salary BETWEEN 1000001 AND 1500000 THEN '10L-15L' ELSE 'Above 15L' END AS salary_range, COUNT(*) AS emp_count FROM employees GROUP BY salary_range ORDER BY MIN(salary)

# ====================================================================================
# PROJECT MANAGEMENT QUERIES
# ====================================================================================

# Get projects with team size
DB_QUERY_MYSQL_PROJECTS_WITH_TEAM=SELECT p.project_name, p.status, p.budget, COUNT(ep.employee_id) AS team_size, SUM(ep.hours_allocated) AS total_hours FROM projects p LEFT JOIN employee_projects ep ON p.project_id = ep.project_id GROUP BY p.project_id, p.project_name, p.status, p.budget ORDER BY team_size DESC

# Get employee project workload
DB_QUERY_MYSQL_EMPLOYEE_WORKLOAD=SELECT e.employee_id, e.first_name, e.last_name, e.job_title, COUNT(ep.project_id) AS project_count, SUM(ep.hours_allocated) AS total_hours FROM employees e LEFT JOIN employee_projects ep ON e.employee_id = ep.employee_id GROUP BY e.employee_id, e.first_name, e.last_name, e.job_title ORDER BY total_hours DESC

# Get multi-project employees (working on 2+ projects)
DB_QUERY_MYSQL_MULTI_PROJECT_EMPLOYEES=SELECT e.first_name, e.last_name, e.job_title, COUNT(ep.project_id) AS project_count FROM employees e JOIN employee_projects ep ON e.employee_id = ep.employee_id GROUP BY e.employee_id, e.first_name, e.last_name, e.job_title HAVING COUNT(ep.project_id) > 1 ORDER BY project_count DESC

# Get project roles distribution
DB_QUERY_MYSQL_PROJECT_ROLES=SELECT role, COUNT(*) AS assignment_count FROM employee_projects GROUP BY role ORDER BY assignment_count DESC

# ====================================================================================
# SALES & ORDER ANALYSIS QUERIES
# ====================================================================================

# Get order statistics by status
DB_QUERY_MYSQL_ORDER_STATS_BY_STATUS=SELECT status, COUNT(*) AS order_count, SUM(total_amount) AS total_revenue, AVG(total_amount) AS avg_order_value, MIN(total_amount) AS min_order, MAX(total_amount) AS max_order FROM orders WHERE status != 'Cancelled' GROUP BY status ORDER BY total_revenue DESC

# Get top customers by revenue
DB_QUERY_MYSQL_TOP_CUSTOMERS=SELECT c.company_name, c.contact_name, COUNT(o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS avg_order_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.status = 'Delivered' GROUP BY c.customer_id, c.company_name, c.contact_name ORDER BY total_spent DESC LIMIT 10

# Get monthly sales trend (last 12 months)
DB_QUERY_MYSQL_MONTHLY_SALES=SELECT DATE_FORMAT(order_date, '%Y-%m') AS month, COUNT(*) AS order_count, SUM(total_amount) AS monthly_revenue FROM orders WHERE order_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) AND status != 'Cancelled' GROUP BY DATE_FORMAT(order_date, '%Y-%m') ORDER BY month DESC

# Get employee sales performance
DB_QUERY_MYSQL_EMPLOYEE_SALES=SELECT e.first_name, e.last_name, e.job_title, COUNT(o.order_id) AS orders_handled, SUM(o.total_amount) AS total_sales FROM employees e JOIN orders o ON e.employee_id = o.employee_id WHERE o.status = 'Delivered' GROUP BY e.employee_id, e.first_name, e.last_name, e.job_title ORDER BY total_sales DESC

# ====================================================================================
# HR ANALYTICS QUERIES
# ====================================================================================

# Get hiring trend by year
DB_QUERY_MYSQL_HIRING_TREND=SELECT YEAR(hire_date) AS hire_year, COUNT(*) AS hired_count, AVG(salary) AS avg_starting_salary FROM employees GROUP BY YEAR(hire_date) ORDER BY hire_year DESC

# Get tenure distribution
DB_QUERY_MYSQL_TENURE_DISTRIBUTION=SELECT CASE WHEN TIMESTAMPDIFF(YEAR, hire_date, CURDATE()) < 1 THEN 'Less than 1 year' WHEN TIMESTAMPDIFF(YEAR, hire_date, CURDATE()) BETWEEN 1 AND 3 THEN '1-3 years' WHEN TIMESTAMPDIFF(YEAR, hire_date, CURDATE()) BETWEEN 4 AND 5 THEN '4-5 years' ELSE 'More than 5 years' END AS tenure, COUNT(*) AS emp_count FROM employees GROUP BY tenure ORDER BY MIN(TIMESTAMPDIFF(YEAR, hire_date, CURDATE()))

# Get department diversity (job titles per department)
DB_QUERY_MYSQL_DEPT_DIVERSITY=SELECT d.department_name, COUNT(DISTINCT e.job_title) AS unique_roles, COUNT(e.employee_id) AS total_employees FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name ORDER BY unique_roles DESC

# Get job title distribution
DB_QUERY_MYSQL_JOB_TITLE_DISTRIBUTION=SELECT job_title, COUNT(*) AS employee_count, AVG(salary) AS avg_salary FROM employees GROUP BY job_title ORDER BY employee_count DESC

# ====================================================================================
# CROSS-TABLE JOIN QUERIES
# ====================================================================================

# Employee-Department-Project full details
DB_QUERY_MYSQL_EMPLOYEE_FULL_DETAILS=SELECT e.employee_id, CONCAT(e.first_name, ' ', e.last_name) AS full_name, e.email, e.job_title, e.salary, d.department_name, d.location, COUNT(DISTINCT ep.project_id) AS project_count FROM employees e JOIN departments d ON e.department_id = d.department_id LEFT JOIN employee_projects ep ON e.employee_id = ep.employee_id GROUP BY e.employee_id, e.first_name, e.last_name, e.email, e.job_title, e.salary, d.department_name, d.location ORDER BY e.employee_id

# Project-Department-Employee allocation
DB_QUERY_MYSQL_PROJECT_ALLOCATION=SELECT p.project_name, p.status, p.budget, d.department_name, COUNT(ep.employee_id) AS team_members, SUM(ep.hours_allocated) AS total_hours, AVG(e.salary) AS avg_team_salary FROM projects p JOIN departments d ON p.department_id = d.department_id LEFT JOIN employee_projects ep ON p.project_id = ep.project_id LEFT JOIN employees e ON ep.employee_id = e.employee_id GROUP BY p.project_id, p.project_name, p.status, p.budget, d.department_name ORDER BY p.budget DESC

# Customer-Order-Employee relationship
DB_QUERY_MYSQL_CUSTOMER_ORDER_EMPLOYEE=SELECT c.company_name, c.city, c.country, COUNT(o.order_id) AS total_orders, SUM(o.total_amount) AS total_revenue, COUNT(DISTINCT o.employee_id) AS sales_reps_involved FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.status != 'Cancelled' GROUP BY c.customer_id, c.company_name, c.city, c.country ORDER BY total_revenue DESC

# ====================================================================================
# QUERIES WITH VARIABLE INTERPOLATION
# ====================================================================================

# Get employees by department (with variable)
DB_QUERY_MYSQL_EMPLOYEES_BY_DEPT_ID=SELECT * FROM employees WHERE department_id = {{dept_id}} ORDER BY employee_id

# Get employees with salary above threshold
DB_QUERY_MYSQL_HIGH_SALARY_EMP=SELECT * FROM employees WHERE salary > {{salary_threshold}} ORDER BY salary DESC

# Get projects by status (with variable)
DB_QUERY_MYSQL_PROJECTS_BY_STATUS=SELECT * FROM projects WHERE status = '{{project_status}}' ORDER BY project_id

# Get orders by date range
DB_QUERY_MYSQL_ORDERS_BY_DATE_RANGE=SELECT * FROM orders WHERE order_date >= '{{start_date}}' AND order_date <= '{{end_date}}' ORDER BY order_date

# Search customers by city
DB_QUERY_MYSQL_CUSTOMERS_BY_CITY=SELECT * FROM customers WHERE city = '{{city_name}}' ORDER BY company_name

# Get employees hired after date
DB_QUERY_MYSQL_EMP_AFTER_DATE=SELECT * FROM employees WHERE hire_date > '{{hire_date}}' ORDER BY hire_date

# ====================================================================================
# AGGREGATE & STATISTICAL QUERIES
# ====================================================================================

# Overall statistics summary
DB_QUERY_MYSQL_OVERALL_STATS=SELECT (SELECT COUNT(*) FROM employees) AS total_employees, (SELECT COUNT(*) FROM departments) AS total_departments, (SELECT COUNT(*) FROM projects) AS total_projects, (SELECT COUNT(*) FROM customers) AS total_customers, (SELECT COUNT(*) FROM orders) AS total_orders, (SELECT SUM(total_amount) FROM orders WHERE status = 'Delivered') AS total_revenue

# Department budget vs actual spend
DB_QUERY_MYSQL_DEPT_BUDGET_VS_SPEND=SELECT d.department_name, d.budget AS allocated_budget, SUM(e.salary) AS salary_expense, COUNT(e.employee_id) AS headcount, (d.budget - COALESCE(SUM(e.salary), 0)) AS budget_remaining FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name, d.budget ORDER BY budget_remaining DESC

# Project ROI analysis (simulated)
DB_QUERY_MYSQL_PROJECT_ROI=SELECT project_name, budget, status, CASE status WHEN 'Completed' THEN budget * 1.3 WHEN 'Active' THEN budget * 0.5 ELSE 0 END AS estimated_value, CASE status WHEN 'Completed' THEN (budget * 1.3 - budget) WHEN 'Active' THEN (budget * 0.5 - budget) ELSE -budget END AS roi FROM projects ORDER BY roi DESC

# ====================================================================================
# DATA VALIDATION QUERIES
# ====================================================================================

# Check for orphaned employee records (no department)
DB_QUERY_MYSQL_ORPHANED_EMPLOYEES=SELECT COUNT(*) AS orphaned_count FROM employees e WHERE NOT EXISTS (SELECT 1 FROM departments d WHERE d.department_id = e.department_id)

# Check for duplicate emails
DB_QUERY_MYSQL_DUPLICATE_EMAILS=SELECT email, COUNT(*) AS duplicate_count FROM employees GROUP BY email HAVING COUNT(*) > 1

# Check for invalid salary values
DB_QUERY_MYSQL_INVALID_SALARIES=SELECT COUNT(*) AS invalid_count FROM employees WHERE salary IS NULL OR salary <= 0

# Check for future hire dates
DB_QUERY_MYSQL_FUTURE_HIRE_DATES=SELECT COUNT(*) AS future_hire_count FROM employees WHERE hire_date > CURDATE()

# ====================================================================================
# PERFORMANCE MONITORING QUERIES
# ====================================================================================

# Get current database date/time
DB_QUERY_MYSQL_GET_CURRENT_DATETIME=SELECT NOW() AS current_datetime, CURDATE() AS current_date, CURTIME() AS current_time

# Get MySQL version
DB_QUERY_MYSQL_GET_VERSION=SELECT VERSION() AS mysql_version

# Table row counts
DB_QUERY_MYSQL_TABLE_COUNTS=SELECT 'employees' AS table_name, COUNT(*) AS row_count FROM employees UNION ALL SELECT 'departments', COUNT(*) FROM departments UNION ALL SELECT 'projects', COUNT(*) FROM projects UNION ALL SELECT 'customers', COUNT(*) FROM customers UNION ALL SELECT 'orders', COUNT(*) FROM orders UNION ALL SELECT 'employee_projects', COUNT(*) FROM employee_projects

# ====================================================================================
# REPORTING QUERIES
# ====================================================================================

# Executive dashboard summary
DB_QUERY_MYSQL_EXECUTIVE_DASHBOARD=SELECT (SELECT COUNT(*) FROM employees) AS total_employees, (SELECT COUNT(*) FROM departments) AS total_departments, (SELECT SUM(budget) FROM departments) AS total_dept_budget, (SELECT COUNT(*) FROM projects WHERE status = 'Active') AS active_projects, (SELECT SUM(budget) FROM projects WHERE status = 'Active') AS active_project_budget, (SELECT SUM(total_amount) FROM orders WHERE status = 'Delivered') AS ytd_revenue, (SELECT COUNT(DISTINCT customer_id) FROM orders WHERE status = 'Delivered') AS active_customers

# Department performance scorecard
DB_QUERY_MYSQL_DEPT_SCORECARD=SELECT d.department_name, d.budget, COUNT(e.employee_id) AS headcount, AVG(e.salary) AS avg_salary, SUM(e.salary) AS total_salary, COUNT(DISTINCT p.project_id) AS active_projects, SUM(p.budget) AS project_budgets FROM departments d LEFT JOIN employees e ON d.department_id = e.department_id LEFT JOIN projects p ON d.department_id = p.department_id AND p.status = 'Active' GROUP BY d.department_id, d.department_name, d.budget ORDER BY d.department_name

# Employee performance report
DB_QUERY_MYSQL_EMPLOYEE_PERFORMANCE=SELECT e.employee_id, CONCAT(e.first_name, ' ', e.last_name) AS employee_name, e.job_title, d.department_name, e.salary, COUNT(DISTINCT ep.project_id) AS projects_assigned, SUM(ep.hours_allocated) AS total_hours, COUNT(DISTINCT o.order_id) AS orders_handled FROM employees e JOIN departments d ON e.department_id = d.department_id LEFT JOIN employee_projects ep ON e.employee_id = ep.employee_id LEFT JOIN orders o ON e.employee_id = o.employee_id GROUP BY e.employee_id, e.first_name, e.last_name, e.job_title, d.department_name, e.salary ORDER BY e.employee_id

# ====================================================================================
# PARAMETERIZED QUERIES (PREPARED STATEMENTS) - RECOMMENDED FOR SECURITY
# ====================================================================================
# These queries use ? placeholders instead of hardcoded values
# Use with: user executes parameterized query "{query}" with parameters:
# Benefits: SQL injection prevention, performance optimization, type safety
# ====================================================================================

# Get employee by ID (parameterized)
DB_QUERY_MYSQL_GET_EMPLOYEE_BY_ID_PARAM=SELECT * FROM employees WHERE employee_id = ?

# Get employees by department (parameterized)
DB_QUERY_MYSQL_GET_EMPLOYEES_BY_DEPT_PARAM=SELECT * FROM employees WHERE department_id = ? ORDER BY salary DESC

# Get employees with salary range (parameterized)
DB_QUERY_MYSQL_GET_EMPLOYEES_SALARY_RANGE_PARAM=SELECT * FROM employees WHERE salary BETWEEN ? AND ? ORDER BY salary

# Get employees by hire date (parameterized)
DB_QUERY_MYSQL_GET_EMPLOYEES_BY_HIRE_DATE_PARAM=SELECT * FROM employees WHERE hire_date >= ? ORDER BY hire_date DESC

# Search employees by name (parameterized LIKE)
DB_QUERY_MYSQL_SEARCH_EMPLOYEES_BY_NAME_PARAM=SELECT * FROM employees WHERE first_name LIKE ? OR last_name LIKE ? ORDER BY last_name

# Get employees by multiple IDs (parameterized IN clause)
DB_QUERY_MYSQL_GET_EMPLOYEES_BY_IDS_PARAM=SELECT * FROM employees WHERE employee_id IN (?, ?, ?) ORDER BY employee_id

# Insert new employee (parameterized)
DB_QUERY_MYSQL_INSERT_EMPLOYEE_PARAM=INSERT INTO employees (employee_id, first_name, last_name, email, phone, hire_date, job_title, salary, department_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)

# Update employee salary (parameterized)
DB_QUERY_MYSQL_UPDATE_EMPLOYEE_SALARY_PARAM=UPDATE employees SET salary = ? WHERE employee_id = ?

# Update employee department (parameterized)
DB_QUERY_MYSQL_UPDATE_EMPLOYEE_DEPT_PARAM=UPDATE employees SET department_id = ? WHERE employee_id = ?

# Delete employee (parameterized)
DB_QUERY_MYSQL_DELETE_EMPLOYEE_PARAM=DELETE FROM employees WHERE employee_id = ?

# Get department employees with salary filter (parameterized)
DB_QUERY_MYSQL_DEPT_EMPLOYEES_SALARY_PARAM=SELECT e.* FROM employees e WHERE e.department_id = ? AND e.salary > ? ORDER BY e.salary DESC

# Get active projects by department (parameterized)
DB_QUERY_MYSQL_ACTIVE_PROJECTS_BY_DEPT_PARAM=SELECT p.* FROM projects p WHERE p.department_id = ? AND p.status = ? ORDER BY p.budget DESC

# Get orders by customer and date range (parameterized)
DB_QUERY_MYSQL_ORDERS_BY_CUSTOMER_DATE_PARAM=SELECT * FROM orders WHERE customer_id = ? AND order_date BETWEEN ? AND ? ORDER BY order_date DESC

# Get projects by budget threshold (parameterized)
DB_QUERY_MYSQL_PROJECTS_BY_BUDGET_PARAM=SELECT * FROM projects WHERE budget >= ? ORDER BY budget DESC

# ====================================================================================
# COMPARISON: HARDCODED vs PARAMETERIZED
# ====================================================================================
# 
# HARDCODED (Less Secure):
#   DB_QUERY_MYSQL_GET_ACTIVE_PROJECTS=SELECT * FROM projects WHERE status = 'Active'
#   Usage: When user executes predefined query "MYSQL_GET_ACTIVE_PROJECTS"
#   Problem: Fixed value, can't reuse, potential SQL injection risk
#
# PARAMETERIZED (Recommended):
#   DB_QUERY_MYSQL_ACTIVE_PROJECTS_BY_STATUS_PARAM=SELECT * FROM projects WHERE status = ?
#   Usage: When user executes parameterized query "{DB_QUERY_MYSQL_ACTIVE_PROJECTS_BY_STATUS_PARAM}" with parameters:
#          | Active |
#   Benefits: Reusable, secure, performant
#
# ====================================================================================

